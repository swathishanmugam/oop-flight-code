from argparse import Namespace
from pathlib import Path
import re

sfr_hpp = Path(".") / "src" / "sfr.hpp"

hpp_output = """
    namespace overrideable {
        // Generic Value Override via Uplink (Namespace is Automatically Generated by //@Overrideable comment + Python Script)
        extern const void *editable_bools[!n_bool!]; // Editable Bool Fields 
        extern const void *editable_ints[!n_int!]; // Editable Int Fields 
        extern const void *editable_floats[!n_float!]; // Editable Float Fields 
    } // namespace overrideable
"""

cpp_output = """
        namespace overrideable {
        // Generic Value Override via Uplink (Namespace is Automatically Generated by //@Overrideable comment + Python Script)
        // Editable Bool Fields
        const void *editable_bools[!n_bool!] = {
            !bool!
        };
        // Editable Int Fields
        const void *editable_ints[!n_int!] = {
            !int!
        };
        // Editable Float Fields
        const void *editable_floats[!n_float!] = {
            !float!
        };

    } // namespace overrideable
"""

current_namespace = None
type_to_size = {
    "bool": [],
    "int": [],
    "float": [],
    "uint8_t": [],
    "uint16_t": [],
}

regex = "extern # [^\\[\\]]+;"

# Read sfr.hpp to Parse Out Valid Settable Values (Skip Namespace overriable)
with open(sfr_hpp) as file:
    for line in file:
        line = line.strip()
        if len(line) > 0 and not line.startswith("//"):  # and "//@Overriableable" in line
            split = line.split(" ")
            if "namespace" in line and len(split) >= 2:
                current_namespace = split[1]
            elif current_namespace != "overrideable":
                match_list = [re.search(regex.replace("#", x), line)
                              for x in type_to_size.keys()]
                found = [x for x in match_list if x is not None]
                if len(found) > 0:
                    print(line)
                    start = split.index("extern")
                    type_str = split[start+1]
                    var = split[start+2].replace(";", "")

                    type_to_size[type_str].append(
                        (" "*12)+"&sfr::"+current_namespace+"::"+var)

# Update Output Strings
for t_str in type_to_size.keys():
    n_type_str = '!n_'+t_str+'!'
    ptr_str = "!"+t_str+"!"
    hpp_output = hpp_output.replace(n_type_str, str(len(type_to_size[t_str])))
    cpp_output = cpp_output.replace(n_type_str, str(len(type_to_size[t_str])))
    cpp_output = cpp_output.replace(ptr_str, ",\n".join(type_to_size[t_str]))


# Display Output
print("sfr.cpp\n\n")
print(cpp_output)
print("\n\nsfr.hpp\n\n")
print(hpp_output)
